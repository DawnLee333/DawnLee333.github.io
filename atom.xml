<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DawnLee</title>
  
  <subtitle>Dawn is so beautiful but gone too soon!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dawnlee333.github.io/"/>
  <updated>2020-07-30T10:23:04.184Z</updated>
  <id>https://dawnlee333.github.io/</id>
  
  <author>
    <name>Dawn Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第4章面对对象编程（上）</title>
    <link href="https://dawnlee333.github.io/2020/07/30/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://dawnlee333.github.io/2020/07/30/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2020-07-30T07:25:14.276Z</published>
    <updated>2020-07-30T10:23:04.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第4章-面对对象"><a href="#第4章-面对对象" class="headerlink" title="第4章 面对对象"></a>第4章 面对对象</h1><h2 id="Java面向对象学习的三条主线："><a href="#Java面向对象学习的三条主线：" class="headerlink" title="Java面向对象学习的三条主线："></a>Java面向对象学习的三条主线：</h2><ol><li>Java类及类的成员：属性、方法、构造器；代码块、内部类</li><li>面向对象的三大特征：封装性、继承性、多态性（、抽样性）</li><li>其他关键字：this、super、final、abstract、interface、package、import等</li></ol><ul><li>三条主线并行推进</li></ul><h2 id="1-面向过程与面向对象"><a href="#1-面向过程与面向对象" class="headerlink" title="1. 面向过程与面向对象"></a>1. 面向过程与面向对象</h2><h3 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h3><ol><li>面向过程：强调的是功能行为，以函数为最小单位，考虑怎么做。</li><li>面向对象：将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</li></ol><h3 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h3><ol><li>封装（Encapsulation）</li><li>继承（Inheritance）</li><li>多态（Polymorphism）</li></ol><h3 id="面对对象的思想概述"><a href="#面对对象的思想概述" class="headerlink" title="面对对象的思想概述"></a>面对对象的思想概述</h3><ol><li>程序员从面向过程的执行者转化成了面向对象的指挥者。</li><li>面对对象分析问题的思路和步骤：<ul><li>根据问题需要，选择问题所针对的现实世界中的实体。</li><li>从事体中寻找解决问题相关的属性和功能，这些属性和功能就形成了概念世界中的类。</li><li>把抽象的实体用计算机语言进行描述，形成计算机世界中类的定义。即借助某种程序语言，把类构造成计算机能够识别和处理的数据结构。</li><li>将类实例化成计算机世界中的对象。对象计算机世界中解决问题的最终工具。</li></ul></li></ol><blockquote><p>练习1</p><ol><li><p>我要开车去丽江，这句话包含的类有什么？</p></li><li><p>体会一下几个经典案例涉及到的类。</p><ul><li>人在黑板画圆</li><li>列车司机紧急刹车</li><li>售货员统计售货小票的金额</li><li>你把门关上了</li></ul></li><li><p>抽象出下面系统中的“类”及其关系。</p><p><img src= "/img/loading.gif" data-src="/2020/07/30/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/D:%5CMyHexo%5Csource_drafts%5C%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89%5C01.png" alt></p></li></ol></blockquote><h2 id="2-Java基本元素：类和对象"><a href="#2-Java基本元素：类和对象" class="headerlink" title="2. Java基本元素：类和对象"></a>2. Java基本元素：类和对象</h2><h3 id="面对对象的思想概述-1"><a href="#面对对象的思想概述-1" class="headerlink" title="面对对象的思想概述"></a>面对对象的思想概述</h3><ul><li>类（Class）和对象（Object）是面向对象的核心概念。<ul><li>类是对一类事物的描述，是抽象的、概念上的定义</li><li>对象是实际存在的该类事物的每个个体，因而也成为实例（instance）</li></ul></li><li>万物皆对象<ul><li>面对对象程序设计的重点是类的设计</li><li>类的设计，其实就是类的成员的设计</li></ul></li></ul><h3 id="Java类及类的成员"><a href="#Java类及类的成员" class="headerlink" title="Java类及类的成员"></a>Java类及类的成员</h3><ul><li>现实世界的生物体，达到鲸鱼，小到蚂蚁，都是由最基本的细胞构成的。同理，Java代码世界是由诸多不同功能的类构成的。</li><li>现实生物世界中的细胞又是由什么构成的呢？细胞核、细胞质……那么，Java中用类来描述事物也是如此。常见类的成员有：<ul><li>属性：对应类中的成员变量</li><li>行为：对应类中的成员方法</li></ul></li></ul><blockquote><p>Field = 属性 = 成员变量 = 域、字段，Method = （成员）方法 = 函数</p><p>创建类的对象 = 类的实例化 = 实例化类</p></blockquote><h2 id="3-对象的创建和使用"><a href="#3-对象的创建和使用" class="headerlink" title="3. 对象的创建和使用"></a>3. 对象的创建和使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.dawn333.oop;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>    一、类和对象的使用（面对对象思想落地的实现）：</span></span><br><span class="line"><span class="comment"> * 1、创建类，设计类的成员</span></span><br><span class="line"><span class="comment"> * 2、创建类的对象</span></span><br><span class="line"><span class="comment"> * 3、通过“对象.属性”或“对象.方法”调用对象的结构</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *     二、如果创建了多个对象，则每个对象都独立的拥有一套属性。（非static）</span></span><br><span class="line"><span class="comment"> *     意味着，如果改一个对象的属性a，不影响另一个对象属性a的值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DawnLee</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2020-7-30    16:32:18</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Person类的对象、</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用对象的结构：属性、方法</span></span><br><span class="line">        <span class="comment">//调用属性：对象.属性</span></span><br><span class="line">        p1.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        p1.isMale = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(p1.name);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用方法：对象.方法</span></span><br><span class="line">        p1.eat();</span><br><span class="line">        p1.sleep();</span><br><span class="line">        p1.talk(<span class="string">&quot;Chinese&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//************************</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(p2.name);<span class="comment">//null</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//************************</span></span><br><span class="line">        Person p3 = p1;</span><br><span class="line">        <span class="comment">//将p1变量保存的地址赋给p3，导致p1和p3指向了堆空间中的同一个对象实体。</span></span><br><span class="line">        System.out.println(p3.name);<span class="comment">//Tom</span></span><br><span class="line">        p3.age = <span class="number">10</span>;</span><br><span class="line">        System.out.println(p1.age);<span class="comment">//10        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">boolean</span> isMale;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人可以吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人可以睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">(String language)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;人可以说话，使用的语言是：&quot;</span> + language);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>运行结果：</li></ul><p><img src= "/img/loading.gif" data-src="/2020/07/30/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/D:%5CMyHexo%5Csource_drafts%5C%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89%5C02RunResult.png" alt></p><ul><li><p>内存解析</p><img src= "/img/loading.gif" data-src="/2020/07/30/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/MyHexo\source\_drafts\第4章面对对象编程（上）\03MemoryParse.png" style="zoom:50%;"><ul><li>堆（heap），此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。</li><li>通常所说的栈（stack），是指虚拟机栈。虚拟机栈用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型（bolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。方法执行完，自动释放。</li><li>方法区（method area），用于存储已被虚拟机加载类信息、常量、静态变量、即时编译器编译后的代码等数据。</li><li>对象的内存解析</li></ul><p><img src= "/img/loading.gif" data-src="/2020/07/30/%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89/D:%5CMyHexo%5Csource_drafts%5C%E7%AC%AC4%E7%AB%A0%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8A%EF%BC%89%5C04%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E8%A7%A3%E6%9E%90.png" alt></p></li></ul><h2 id="4-类的成员之一：属性"><a href="#4-类的成员之一：属性" class="headerlink" title="4. 类的成员之一：属性"></a>4. 类的成员之一：属性</h2><h2 id="5-类的成员之二：方法"><a href="#5-类的成员之二：方法" class="headerlink" title="5. 类的成员之二：方法"></a>5. 类的成员之二：方法</h2><h2 id="6-再谈方法"><a href="#6-再谈方法" class="headerlink" title="6. 再谈方法"></a>6. 再谈方法</h2><h2 id="7-OOP特征一：封装与隐藏"><a href="#7-OOP特征一：封装与隐藏" class="headerlink" title="7. OOP特征一：封装与隐藏"></a>7. OOP特征一：封装与隐藏</h2><h2 id="8-类的成员之三：构造器"><a href="#8-类的成员之三：构造器" class="headerlink" title="8. 类的成员之三：构造器"></a>8. 类的成员之三：构造器</h2><h2 id="9-关键字：this"><a href="#9-关键字：this" class="headerlink" title="9. 关键字：this"></a>9. 关键字：this</h2><h2 id="10-关键字：package、import"><a href="#10-关键字：package、import" class="headerlink" title="10. 关键字：package、import"></a>10. 关键字：package、import</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第4章-面对对象&quot;&gt;&lt;a href=&quot;#第4章-面对对象&quot; class=&quot;headerlink&quot; title=&quot;第4章 面对对象&quot;&gt;&lt;/a&gt;第4章 面对对象&lt;/h1&gt;&lt;h2 id=&quot;Java面向对象学习的三条主线：&quot;&gt;&lt;a href=&quot;#Java面向对象学习的三条
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>DraftTest</title>
    <link href="https://dawnlee333.github.io/2020/07/30/DraftTest/"/>
    <id>https://dawnlee333.github.io/2020/07/30/DraftTest/</id>
    <published>2020-07-30T02:00:29.000Z</published>
    <updated>2020-07-30T02:53:24.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><ul><li>-无序列表</li></ul><ul><li>*无序列表</li></ul><ul><li>+无序列表</li></ul><ol><li>阿拉伯数字后加.来表示有序列表<ul><li>嵌套列表</li></ul></li></ol><p><strong>前后加两个*加粗</strong></p><p><strong>前后加两个_加粗</strong></p><p><em>前后加一个*变斜体</em></p><p><em>前后加一个_变斜体</em></p><p><strong><em>前后加3个*倾斜加粗</em></strong></p><p><strong><em>前后加3个_倾斜加粗</em></strong></p><p><del>前后使用两个\</del>来加删除线~~</p><hr><p>在单独一行使用三个火三个以上*或-来标记分割线</p><hr><p><u>使用&lt;u&gt;和&lt;/u&gt;来标记下划线</u></p><p>使用[^脚注]来注明信息[^比如这样]</p><blockquote><p>使用&gt;来引用一段内容实现区块引用</p><blockquote><p>还可以使用多个&gt;来实现嵌套区块引用</p><blockquote><p>这是第三层嵌套</p></blockquote></blockquote></blockquote><p><code>对于短代码，使用两个反引号包裹</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\对于代码块则使用三个反引号包裹，还可以在前<span class="number">3</span>个反引号后面注明语言类型</span><br></pre></td></tr></table></figure><p>一般MarkDawn的超链接方式有两种：</p><ol><li>一种是用方括号把超链接的内容括起来，后面紧跟括号里面放上链接地址：<a href="dawnlee333.github.io">超链接</a></li><li>第二种则是直接用尖括号将链接地址括起来：<a href="https://dawn_lee.gitee.io">https://dawn_lee.gitee.io</a></li></ol><p>引用图片：![alt属性文本](图片地址 “图片标题”)</p><pre><code>- 其中图片标题和提alt属性文本可以不写</code></pre><p><img src= "/img/loading.gif" data-src="https://github.com/DawnLee333/DawnLee333.github.io/blob/master/2020/07/30/DraftTest/DraftTest.jpg?raw=true" alt></p><p>对于最基础的表格，仅用|和-来标记表格的基本结构</p><p>|表头1|表头2|</p><p>​    -:左对齐</p><p>​    :-右对齐</p><p>​    :-:居中对齐</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MarkDownTest</title>
    <link href="https://dawnlee333.github.io/2020/07/29/MarkDownTest/"/>
    <id>https://dawnlee333.github.io/2020/07/29/MarkDownTest/</id>
    <published>2020-07-29T08:15:14.000Z</published>
    <updated>2020-07-30T03:41:13.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><ul><li>无序列表1</li></ul><ul><li>无序列表2</li></ul><ul><li>无序列表3</li></ul><ol><li><p>有序列表1</p></li><li><p>有序列表2</p></li><li><p>有序列表3</p></li><li><p>第一项</p><ul><li>列表元素</li><li>列表元素</li></ul></li></ol><p>段落</p><p><strong>粗体</strong></p><p><strong>粗体</strong></p><p><em>倾斜</em></p><p><em>倾斜</em></p><p><strong><em>粗斜体</em></strong></p><p><del>删除线</del></p><hr><p>分割线</p><hr><p><u>下划线文本</u></p><p>巴拉巴拉[^这是我随便打的脚注]</p><blockquote><p>这是一段引用内容</p></blockquote><blockquote><p>嵌套引用最外层</p><blockquote><p>嵌套引用第二层</p><blockquote><p>嵌套引用第三层</p></blockquote></blockquote></blockquote><p>代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class HelloWorld&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链接</p><p><a href="https://www.dawnlee333.github.io">我的博客</a></p><p>&lt;<a href="http://www.baidu.com&gt;">www.baidu.com&gt;</a></p><p><img src= "/img/loading.gif" data-src="https://github.com/DawnLee333/DawnLee333.github.io/blob/master/2020/07/29/MarkDownTest/wh1200.jpg?raw=true%22%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95%22" alt></p><p>表格：</p><table><thead><tr><th align="center">表头1</th><th align="center">表头2</th></tr></thead><tbody><tr><td align="center">单元格1</td><td align="center">单元格2</td></tr><tr><td align="center">单元格3</td><td align="center">单元格4</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://dawnlee333.github.io/2020/07/29/hello-world/"/>
    <id>https://dawnlee333.github.io/2020/07/29/hello-world/</id>
    <published>2020-07-29T00:36:41.928Z</published>
    <updated>2020-07-29T00:36:41.928Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
